'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var util = require('@polkadot/util');
require('@polkadot/util-crypto');
require('@polkadot/types');
require('./utils/prefixes.js');
require('./utils/separator.js');
require('@polkadot/api');
require('./create-type/interfaces.js');
var createPayload = require('./create-type/create-payload.js');

class GearGas {
    _api;
    constructor(_api) {
        this._api = _api;
    }
    #getTypeAndMeta(metaOrTypeOfPayload, metaType) {
        if (!metaOrTypeOfPayload) {
            return [undefined, undefined];
        }
        if (util.isString(metaOrTypeOfPayload)) {
            return [metaOrTypeOfPayload, undefined];
        }
        else {
            return [metaOrTypeOfPayload[metaType], metaOrTypeOfPayload];
        }
    }
    async initUpload(sourceId, code, payload, value, allowOtherPanics, metaOrTypeOfPayload) {
        const [type, meta] = this.#getTypeAndMeta(metaOrTypeOfPayload, 'init_input');
        return this._api.rpc['gear'].calculateInitUploadGas(sourceId, util.isHex(code) ? code : this._api.createType('Bytes', Array.from(code)).toHex(), createPayload.createPayload(payload, type, meta?.types), value || 0, allowOtherPanics || true);
    }
    async initCreate(sourceId, codeId, payload, value, allowOtherPanics, metaOrTypeOfPayload) {
        const [type, meta] = this.#getTypeAndMeta(metaOrTypeOfPayload, 'init_input');
        return this._api.rpc['gear'].calculateInitCreateGas(sourceId, codeId, createPayload.createPayload(payload, type, meta?.types), value || 0, allowOtherPanics || true);
    }
    async handle(sourceId, destinationId, payload, value, allowOtherPanics, metaOrTypeOfPayload) {
        const [type, meta] = this.#getTypeAndMeta(metaOrTypeOfPayload, 'handle_input');
        return this._api.rpc['gear'].calculateHandleGas(sourceId, destinationId, createPayload.createPayload(payload, type, meta?.types), value || 0, allowOtherPanics || true);
    }
    async reply(sourceId, messageId, exitCode, payload, value, allowOtherPanics, metaOrTypeOfPayload) {
        const [type, meta] = this.#getTypeAndMeta(metaOrTypeOfPayload, 'handle_input');
        return this._api.rpc['gear'].calculateReplyGas(sourceId, messageId, exitCode, createPayload.createPayload(payload, type, meta?.types), value || 0, allowOtherPanics || true);
    }
}

exports.GearGas = GearGas;
