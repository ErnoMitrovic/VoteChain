'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('@polkadot/util');
require('@polkadot/util-crypto');
require('@polkadot/types');
var prefixes = require('./utils/prefixes.js');
var separator = require('./utils/separator.js');
var program_errors = require('./errors/program.errors.js');
var state_errors = require('./errors/state.errors.js');
require('@polkadot/api');

class GearStorage {
    _api;
    constructor(_api) {
        this._api = _api;
    }
    /**
     * Get program from chain
     * @param programId
     * @returns
     */
    async gProg(programId) {
        const storage = (await this._api.rpc.state.getStorage(`0x${prefixes.GPROG_HEX}${programId.slice(2)}`));
        if (storage.isNone) {
            throw new state_errors.ReadStorageError(`Program with id ${programId} was not found in the storage`);
        }
        const program = this._api.createType('Program', storage.unwrap());
        if (program.isTerminated)
            throw new program_errors.ProgramTerminatedError(program.asTerminated.toHex());
        if (program.isExited)
            throw new program_errors.ProgramExitedError(program.asExited.toHex());
        return program.asActive;
    }
    /**
     * Get list of pages for program
     * @param programId
     * @param gProg
     * @returns
     */
    async gPages(programId, gProg) {
        const keys = {};
        gProg.pages_with_data.forEach((value) => {
            keys[value.toNumber()] = `0x${prefixes.GPAGES_HEX}${programId.slice(2)}${separator.SEPARATOR}${this._api
                .createType('Bytes', Array.from(this._api.createType('u32', value).toU8a()))
                .toHex()
                .slice(2)}`;
        });
        const pages = {};
        for (const key of Object.keys(keys)) {
            const storage = (await this._api.rpc.state.getStorage(keys[key])).unwrap().toU8a();
            pages[key] = storage;
        }
        return pages;
    }
}

exports.GearStorage = GearStorage;
