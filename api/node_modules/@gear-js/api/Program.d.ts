import { IProgramCreateOptions, IProgramCreateResult, IProgramUploadOptions, IProgramUploadResult, Hex } from './types';
import { GearTransaction } from './Transaction';
import { Metadata } from './types/interfaces';
import { GearApi } from './GearApi';
import { GearGas } from './Gas';
export declare class GearProgram extends GearTransaction {
    protected _api: GearApi;
    calculateGas: GearGas;
    constructor(_api: GearApi);
    /** ### Upload program with code
     * @param program
     * @param meta Metadata
     * @returns ProgramId
     * @example
     * ```javascript
     * const code = fs.readFileSync('path/to/program.opt.wasm');
     * const meta = await getWasmMetadata(fs.readFileSync('path/to/program.meta.wasm'));
     * const api = await GearApi.create();
     * const { programId, codeId, salt, extrinsic } = api.program.upload({
     *   code,
     *   initPayload: {field: 'someValue'},
     *   gasLimit: 20_000_000,
     * }, meta)
     * api.program.signAndSend(account, (events) => {
     *   events.forEach(({event}) => console.log(event.toHuman()))
     * })
     * ```
     */
    upload(program: IProgramUploadOptions, meta?: Metadata, messageType?: string): IProgramUploadResult;
    /** ## Create program using existed codeId
     * @param program
     * @param meta Metadata
     * @returns ProgramId
     * @example
     * ```javascript
     * const codeId = '0x...';
     * const meta = await getWasmMetadata(fs.readFileSync('path/to/program.meta.wasm'));
     * const api = await GearApi.create();
     * const { programId, salt, extrinsic } = api.program.create({
     *   codeId,
     *   initPayload: { field: 'someValue' },
     *   gasLimit: 20_000_000,
     * }, meta)
     * extrinsic.signAndSend(account, (events) => {
     *   events.forEach(({event}) => console.log(event.toHuman()))
     * })
     * ```
     */
    create(program: IProgramCreateOptions, meta?: Metadata, messageType?: string): IProgramCreateResult;
    /**
     * Get ids of all uploaded programs
     * @returns
     */
    allUploadedPrograms(): Promise<Hex[]>;
    /**
     *
     * @param id some address in hex format
     * @returns if address belongs to program, method returns `true`, otherwise `false`
     */
    exists(id: Hex): Promise<boolean>;
    /**
     * Get codeHash of program on-chain
     * @param programId
     * @returns codeHash in hex format
     */
    codeHash(programId: Hex): Promise<Hex>;
}
