import { blake2AsHex, blake2AsU8a } from '@polkadot/util-crypto';
import { u8aToU8a } from '@polkadot/util';
import { CreateType } from '../create-type/CreateType.js';

function generateCodeHash(code) {
    return blake2AsHex(u8aToU8a(code), 256);
}
function generateProgramId(codeOrHash, salt) {
    const [code, codeHash] = typeof codeOrHash === 'string' ? [undefined, codeOrHash] : [codeOrHash, undefined];
    const codeHashU8a = codeHash ? u8aToU8a(codeHash) : blake2AsU8a(code, 256);
    const saltU8a = CreateType.create('Vec<u8>', salt).toU8a().slice(1);
    const id = new Uint8Array(codeHashU8a.byteLength + saltU8a.byteLength);
    id.set(codeHashU8a);
    id.set(saltU8a, codeHashU8a.byteLength);
    return blake2AsHex(id, 256);
}

export { generateCodeHash, generateProgramId };
